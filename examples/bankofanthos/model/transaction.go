package model

import (
	"fmt"
	"time"

	"github.com/ServiceWeaver/weaver"
)

// Transaction defines a banking transaction.
type Transaction struct {
	weaver.AutoMarshal
	FromAccountNum string    `gorm:"column:from_acct;not null"`
	FromRoutingNum string    `gorm:"column:from_route;not null"`
	ToAccountNum   string    `gorm:"column:to_acct;not null"`
	ToRoutingNum   string    `gorm:"column:to_route;not null"`
	Amount         int64     `gorm:"column:amount;not null"`
	Timestamp      time.Time `gorm:"column:timestamp;not null"`
}

const centsPerDollar = 100.0

func (t *Transaction) String() string {
	return fmt.Sprintf("%s->$%.2f->%s",
		t.FromAccountNum, float64(t.Amount)/centsPerDollar, t.ToAccountNum)
}

// TransactionWithID annotates model.Transaction with a unique TransactionID. This is used
// by readers of "transaction" table that require the transaction_id column in addition
// to the rest of transaction data.
//
// Note: Ideally we'd like to have a single Transaction struct which would have the
// TransactionID field as well. However, that doesn't work well with gorm, since
// inserts sql statements generated by gorm always specify transaction_id as 0
// (TransactionID's zero value), resulting in primary key conflicts.
type TransactionWithID struct {
	weaver.AutoMarshal
	Transaction
	TransactionID int64 `gorm:"column:transaction_id;primaryKey;autoIncrement:true"`
}
